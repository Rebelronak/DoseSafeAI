name: 🚀 DoseSafe AI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-test:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: 🔍 Run ESLint
      working-directory: ./frontend
      run: npm run lint
      
    - name: 🧪 Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      
    - name: 🏗️ Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  backend-test:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
        
    - name: 🔍 Run Flake8
      working-directory: ./backend
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: 🎨 Check Black formatting
      working-directory: ./backend
      run: black --check .
      
    - name: 🧪 Run tests with pytest
      working-directory: ./backend
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Bandit security scan
      uses: securecodewarrior/github-action-bandit@v1.0.1
      with:
        path: backend/
        
    - name: 🔍 Run npm audit
      working-directory: ./frontend
      run: |
        npm install
        npm audit --audit-level moderate

  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    services:
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 📦 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: 🏗️ Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: 🚀 Start backend server
      working-directory: ./backend
      run: |
        export FLASK_ENV=testing
        python app.py &
        sleep 10
        
    - name: 🧪 Run integration tests
      run: |
        # Add your integration tests here
        curl -f http://localhost:5000/health || exit 1
        curl -f http://localhost:5000/test/scan || exit 1

  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: dosesafe-ai:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.dosesafe-ai.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment scripts here

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://dosesafe-ai.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🌟 Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment scripts here

  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, integration-test]
    if: always()
    
    steps:
    - name: 📢 Notify on success
      if: success()
      run: echo "✅ All tests passed! 🎉"
      
    - name: 📢 Notify on failure
      if: failure()
      run: echo "❌ Some tests failed! 😞"
